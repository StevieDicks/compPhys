#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "comphys.h"
#include "comphys.c"

double planck1(double wave, double T);

int main(){
  int ni;
  double *wave;
  double T;
  double result;
  FILE *in,*out,*rsp;
  char outfile[80];

  wave = dvector(0,23);

  printf("\nEnter temperature in Kelvin > ");
  ni = scanf("%lf",&T);
  printf("\nEnter the name of the output file > ");
  ni = scanf("%s",outfile);

  if((out = fopen(outfile,"w")) == NULL) {
    printf("\nCannot open %s for writing\n",outfile);
    exit(1);
  }

  if((in = fopen("inputwave.dat","r")) == NULL) {
    printf("\nCannot open file for input\n");
    exit(1);
  }

  while(fscanf(in,"%lf",wave) != EOF) {
    result = planck1(*wave,T);
    fprintf(out,"%7.1lf  %e\n",*wave,result);
  }

  fclose(out);

  if((rsp = fopen("gnuplot.rsp","w")) == NULL) {
    printf("\nCannot open gnuplot.rsp for writing\n");
    exit(1);
  }
  fprintf(rsp,"plot '%s' using 1:2 with lines\n",outfile);
  fprintf(rsp,"pause mouse\n");
  fprintf(rsp,"replot\n");
  fclose(rsp);
  if(system("gnuplot gnuplot.rsp") == -1) {
    printf("\nCommand could not be executed\n");
    exit(1);
  }
  free_dvector(wave,0,23);
  return(0);
}

double planck1(double wave, double T)
{
  static double p = 1.19106e+27;
  double p1;

  p1 = p/(pow(wave,5.0)*(exp(1.43879e+08/(wave*T)) - 1.0));
  return(p1);
}
